import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sys

#creating data or import, creating is copied, i din't understand very well
#import is the data point cloud from thera
'''
#####creating
mean_01 = np.array([0.0, 0.0])
cov_01 = np.array([[1, 0.3], [0.3, 1]])
dist_01 = np.random.multivariate_normal(mean_01, cov_01, 100)

mean_02 = np.array([6.0, 7.0])
cov_02 = np.array([[1.5, 0.3], [0.3, 1]])
dist_02 = np.random.multivariate_normal(mean_02, cov_02, 100)

mean_03 = np.array([7.0, -5.0])
cov_03 = np.array([[1.2, 0.5], [0.5, 1,3]])
dist_03 = np.random.multivariate_normal(mean_03, cov_01, 100)

mean_04 = np.array([2.0, -7.0])
cov_04 = np.array([[1.2, 0.5], [0.5, 1,3]])
dist_04 = np.random.multivariate_normal(mean_04, cov_01, 100)

data = np.vstack((dist_01, dist_02, dist_03, dist_04))
np.random.shuffle(data)

####import
# Loading the data inside an initialized variable
M = pds.read_csv('\\Users\\tommaso\\Desktop\\GIS DataBase\\progetto\\database\\dati interpolati\\Quote_vettoriali_altimetria_interpolate_epurate mare.csv')
# Dropping the CUST_ID column from the dataset with drop() function 
M.fillna(method ='ffill', inplace = True)
# Printing dataset head in output 
print(M.head())
# Initializing a variable with the StandardSclaer() function
scalerFD = StandardScaler()
# Transforming the data of dataset with Scaler
M_scaled = scalerFD.fit_transform(M)
# To make sure that data will follow gaussian distribution  
# We will normalize the scaled data with normalize() function
# Now we will convert numpy arrays in the dataset into dataframes of panda
M_normalized = normalize(M_scaled)
M_normalized = pds.DataFrame(M_normalized)
# Initializing a variable with the PCA() function 
pcaFD = PCA(n_components = 3)
# Transforming the normalized data with PCA 
M_principal = pcaFD.fit_transform(M_normalized)
# Making dataframes from the transformed data
data = pds.DataFrame(M_principal)
# Creating 3 columns in the transformed data (x, y, z axes) 
data.columns = ['C1', 'C2', 'C3']
# Printing the head of the transformed data
#try of setting the 2 parameters of dbscan
print(data.head())
'''
# function to plot founded centroids!!! fond!!
def plot(data, centroids):
     plt.scatter(data[:, 0], data[:, 1], marker = '.',
                 color = 'pink', label = 'data points')
     plt.scatter(centroids[:-1, 0], centroids[:-1, 1],
                 color = 'm', label = 'previously selected centroids')
     plt.scatter(centroids[-1, 0], centroids[-1, 1],
                 color = 'yellow', label = 'next centroid')
     plt.title('Select % d th centroid'%(centroids.shape[0]))

     plt.legend()
     plt.xlim(-5, 12)
     plt.ylim(-10, 15)
     plt.show()

plt.show()
#function to calculate euclidean distance, main part of alg/ function is gonna repeat every time that the algo move the centriods
def distance(p1, p2):
    return np.sum((p1 - p2)**2)

#initialized the centroids for K-means++
#inputs: data - numpy array of data points / k - number of clusters
# 1)initialize the centroids list and add a randomly selected data point to the list
# 2)compute remaining k - 1 centroids
# 3)initialize a list to store distances of data points from nearest centroid
# 4)compute distance of 'point' from each of the previously selected centroid and store the minimum distance
# 5)select data point with maximum distance as our next centroid
def initialize(data, k):
    centroids = []
    centroids.append(data[np.random.randint(
            data.shape[0]), :])
    plot(data, np.array(centroids))
    for c_id in range(k - 1):
        dist = []
        for i in range(data.shape[0]):
            point = data[i, :]
            d = sys.maxsize
            for j in range(len(centroids)):
                temp_dist = distance(point, centroids[j])
                d = min(d, temp_dist)
            dist.append(d)
        dist = np.array(dist)
        next_centroid = data[np.argmax(dist), :]
        centroids.append(next_centroid)
        dist = []
        plot(data, np.array(centroids))
    return centroids

#run it!!!-try different k
#centroids = initialize(data, k = 4)
#centroids = initialize(data, k = 2)
#centroids = initialize(data, k = 10)
